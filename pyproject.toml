[build-system]
requires = ["poetry-core>=2.1.0"]
build-backend = "poetry.core.masonry.api"


[project]
name = "django-test-migrations"
version = "1.5.0"
requires-python = ">=3.10,<4.0"
description = "Test django schema and data migrations, including ordering"
license = "MIT"
license-files = [ "LICENSE" ]
authors = [
  {name = "sobolevn", email = "mail@sobolevn.me"},
]

readme = "README.md"

repository = "https://github.com/wemake-services/django-test-migrations"

keywords = [
  "django",
  "django-tests",
  "django-migrations",
  "django-orm",
  "migrations",
  "orm",
  "sql",
  "tests",
  "test",
  "pytest",
  "pytest-plugin"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
  "Framework :: Django",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
  "Framework :: Django :: 5.2",
]

dependencies = [
  "typing_extensions>=4.0"
]

[project.entry-points."pytest11"]
django_test_migrations = "django_test_migrations.contrib.pytest_plugin"


[tool.poetry.group.dev.dependencies]
django = ">=4.2,<6.0"

mypy = "^1.15"
django-stubs = "^5.1"

wemake-python-styleguide = "^1.1"
ruff = "^0.11"

pytest = "^8.2"
pytest-cov = "^6.0"
pytest-randomly = "^3.15"
pytest-django = "^4.8"
pytest-mock = "^3.14"


[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
target-version = "py310"
line-length = 80

preview = true
fix = true
format.quote-style = "single"
format.docstring-code-format = false
lint.select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
lint.ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLC0414", # it is fine to not rename an import
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
  "RUF012",  # mutable class-level defaults are fine
]
lint.external = [ "WPS" ]
lint.flake8-quotes.inline-quotes = "single"
lint.mccabe.max-complexity = 6
lint.pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "S101",   # asserts
  "S404",   # subprocess calls are for tests
  "S603",   # do not require `shell=True`
  "S607",   # partial executable paths
]
